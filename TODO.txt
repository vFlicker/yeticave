#1. Додати сторінку мої ставки.

#2. Якщо користувач увійшов до облікового запису і він є автором аукціону,
він повинен мати змогу «закрити» аукціон на цій сторінці, що зробить автора
найбільшої ставки переможцем аукціону, а сам аукціон стане неактивним.

#3. Якщо користувач увійшов до облікового запису на сторінці закритого
аукціону і він є переможцем цього аукціону, він має отримати повідомлення
про це.

#4. Має дозволити користувачам переглянути всі АКТИВНІ АУКЦІОНИ.

#5. Сторінка профілю.
- Натискання на ім’я користувача має завантажувати сторінку профілю цього користувача.
Ця сторінка має:
- Виводити кількість підписників цього користувача та кількість осіб,
за якими стежить цей користувач.
- Показувати всі дописи цього користувача в зворотному хронологічному порядку.
- Для будь-якого іншого користувача, що увійшов у свій обліковий запис,
ця сторінка має також показувати кнопку «Підписатись» чи «Відписатись»,
яка дозволить користувачу стежити чи не стежити за дописами власника профілю.
Зверніть увагу, що це стосується лише «інших» користувачів,
користувач не повинен мати можливість стежити за самим собою.

#6. Підписки.
- Посилання «Підписки» на панелі навігації має переносити користувача на сторінку,
де він бачитиме всі дописи, зроблені користувачами, за котрими він стежить.
- Ця сторінка має поводитися так само як сторінка «Усі дописи», але містити обмежений набір дописів.
- Ця сторінка має бути доступною лише для користувачів, що увійшли в обліковий запис.

#7. Пагінація.
- На кожній сторінці, що відображає дописи, має бути показано по 10 дописів.
Якщо потрібно показати більше, ніж 10 дописів, має з’явитися кнопка «Далі»,
що переноситиме користувача на наступну сторінку з дописами
(які мають бути старшими за дописи з поточної сторінки).
- Також на всіх сторінках, окрім першої, має з’являтися кнопка «Попередні»,
що переноситиме користувача на попередню сторінку.
- Клас Django Paginator може стати в пригоді для впровадження пагінації
в серверній частині застосунку (у вашому коді на Python).

#8. Редагувати допис.
- Користувачі повинні мати можливість натиснути на кнопку чи посилання
«Редагувати» поруч з кожним своїм дописом, щоб змінити його.
- Коли користувач натискає «Редагувати» для одного з власних дописів,
наповнення має перетворитися на текстове поле textarea,
в якому користувач зможе змінити вміст допису.
- Після цього користувач повинен мати змогу «Зберегти» відредагований допис.
-  З міркувань безпеки переконайтеся, що ваш застосунок спроєктовано так,
щоб користувачі за жодним з маршрутів не могли змінювати дописи інших користувачів.

#9. Вподобайка та прибрати вподобайку.
- Користувачі повинні мати можливість натиснути на кнопку чи посилання поряд
з будь-яким дописом, щоб поставити йому вподобайку чи прибрати її.

#10. Коли finished_at закінчився, треба міняти прапор is_active у false,
та надсилати повідомлення про перемогу.

___

Я роблю сайт на Django. Мені треба спроектувати архітектуру моделей. Допоможи мені з цим.

У мене є 3 сутності:
- користувач;
- лот;
- ставка.

Кожен користувач може створювати лоти. І кожен користувач може робити ставки на лот, який створив інший користувач. Робити ставку можна більше одного разу, якщо твою ставку перебив інший користувач.

По закінченню дати активності лоту, або якщо людина яка створила лот сама вирішила завершити аукціон, має визначатися переможець. Переможець це той, хто зробив останню найбільшу ставку на лот. Після завершення торгів, визначається переможець і йому на пошту відправляється повідомлення.

На сайті має бути можливість перегляду всіх переможців за останній місяць. Також маємо мати можливість перегладати свої ставки, у одному списку, вони мають бути відспортовані по даті створення, і має відображатися, чи виграла ставка чи ні, або торги ще не завершені.

Допоможи написати моделі для цієї фунеціональності.